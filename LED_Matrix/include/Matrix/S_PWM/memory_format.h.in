/* 
 * File:   memory_format.h
 * Author: David Thacher
 * License: GPL 3.0
 */
 
#ifndef MEMORY_FORMAT_H
#define MEMORY_FORMAT_H

#include <stdint.h>
#include <math.h>
#include <algorithm>
#include "Matrix/config.h"

namespace Matrix {
    // -- DO NOT EDIT BELOW THIS LINE --

    #cmakedefine DEFINE_MAX_RGB_LED_STEPS   @DEFINE_MAX_RGB_LED_STEPS@
    #cmakedefine DEFINE_MIN_REFRESH         @DEFINE_MIN_REFRESH@
    #cmakedefine DEFINE_MATRIX_DCLOCK       @DEFINE_MATRIX_DCLOCK@
    #cmakedefine DEFINE_BLANK_TIME          @DEFINE_BLANK_TIME@
    #cmakedefine DEFINE_FPS                 @DEFINE_FPS@
    #cmakedefine DEFINE_BYPASS_FANOUT       @DEFINE_BYPASS_FANOUT@
    #cmakedefine DEFINE_S_PWM_SEG           @DEFINE_S_PWM_SEG@

    #ifndef DEFINE_BYPASS_FANOUT
    #define DEFINE_BYPASS_FANOUT            false
    #endif
    
    constexpr uint16_t MAX_RGB_LED_STEPS = DEFINE_MAX_RGB_LED_STEPS;       // Contrast Ratio - Min RGB constant forward current (Blue LED in my case) in uA divided by min light current in uA
    constexpr uint16_t MIN_REFRESH = DEFINE_MIN_REFRESH;
    constexpr double SERIAL_CLOCK = (DEFINE_MATRIX_DCLOCK * 1000000.0);
    constexpr uint8_t BLANK_TIME = DEFINE_BLANK_TIME;
    constexpr uint8_t FPS = DEFINE_FPS;
    constexpr bool BYPASS_FANOUT = DEFINE_BYPASS_FANOUT;
    constexpr uint8_t S_PWM_SEG = DEFINE_S_PWM_SEG;
    
    constexpr uint8_t PWM_bits = std::max(round(log2((double) MAX_RGB_LED_STEPS / MULTIPLEX)), S_PWM_SEG);
    constexpr uint8_t upper_bits = PWM_bits - S_PWM_SEG;
    constexpr uint8_t lower_bits = S_PWM_SEG;
    
    typedef volatile uint8_t test2[MULTIPLEX][1 << (PWM_bits - S_PWM_SEG)][1 << S_PWM_SEG][COLUMNS + 1];
}

#endif

